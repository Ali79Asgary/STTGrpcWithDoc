// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepmine/speech/v1/speech.proto

package ir.deepmine.speech.v1;

/**
 * <pre>
 * `StreamingRecognizeResponse` is the only message returned to the client by
 * `BidiStreamingRecognize`. A series of zero or more `StreamingRecognizeResponse`
 * messages are streamed back to the client. If there is no recognizable
 * audio, and `single_utterance` is set to false, then no messages are streamed
 * back to the client.
 * Here's an example of a series of ten `StreamingRecognizeResponse`s that might
 * be returned while processing audio:
 * 1. results { alternatives { transcript: "tube" } stability: 0.01 }
 * 2. results { alternatives { transcript: "to be a" } stability: 0.01 }
 * 3. results { alternatives { transcript: "to be" } stability: 0.9 }
 *    results { alternatives { transcript: " or not to be" } stability: 0.01 }
 * 4. results { alternatives { transcript: "to be or not to be" confidence: 0.92 }
 *              alternatives { transcript: "to bee or not to bee" }
 *              is_final: true }
 * 5. results { alternatives { transcript: " that's" } stability: 0.01 }
 * 6. results { alternatives { transcript: " that is" } stability: 0.9 }
 *    results { alternatives { transcript: " the question" } stability: 0.01 }
 * 7. results { alternatives { transcript: " that is the question" confidence: 0.98 }
 *              alternatives { transcript: " that was the question" }
 *              is_final: true }
 * Notes:
 * - Only two of the above responses #4 and #7 contain final results; they are
 *   indicated by `is_final: true`. Concatenating these together generates the
 *   full transcript: "to be or not to be that is the question".
 * - The others contain interim `results`. #3 and #6 contain two interim
 *   `results`: the first portion has a high stability and is less likely to
 *   change; the second portion has a low stability and is very likely to
 *   change. A UI designer might choose to show only high stability `results`.
 * - The specific `stability` and `confidence` values shown above are only for
 *   illustrative purposes. Actual values may vary.
 * - In each response, only one of these fields will be set:
 *     `error`,
 *     `speech_event_type`, or
 *     one or more (repeated) `results`.
 * </pre>
 *
 * Protobuf type {@code deepmine.speech.v1.StreamingRecognizeResponse}
 */
public  final class StreamingRecognizeResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:deepmine.speech.v1.StreamingRecognizeResponse)
    StreamingRecognizeResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StreamingRecognizeResponse.newBuilder() to construct.
  private StreamingRecognizeResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StreamingRecognizeResponse() {
    errorMessage_ = "";
    results_ = java.util.Collections.emptyList();
    speechEventType_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private StreamingRecognizeResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            errorMessage_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              results_ = new java.util.ArrayList<ir.deepmine.speech.v1.StreamingRecognitionResult>();
              mutable_bitField0_ |= 0x00000002;
            }
            results_.add(
                input.readMessage(ir.deepmine.speech.v1.StreamingRecognitionResult.parser(), extensionRegistry));
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            speechEventType_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        results_ = java.util.Collections.unmodifiableList(results_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ir.deepmine.speech.v1.SpeechProto.internal_static_deepmine_speech_v1_StreamingRecognizeResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ir.deepmine.speech.v1.SpeechProto.internal_static_deepmine_speech_v1_StreamingRecognizeResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ir.deepmine.speech.v1.StreamingRecognizeResponse.class, ir.deepmine.speech.v1.StreamingRecognizeResponse.Builder.class);
  }

  /**
   * <pre>
   * Indicates the type of speech event.
   * </pre>
   *
   * Protobuf enum {@code deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType}
   */
  public enum SpeechEventType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * No speech event specified.
     * </pre>
     *
     * <code>SPEECH_EVENT_UNSPECIFIED = 0;</code>
     */
    SPEECH_EVENT_UNSPECIFIED(0),
    /**
     * <pre>
     * This event indicates that the server has detected the end of the user's
     * speech utterance and expects no additional speech. Therefore, the server
     * will not process additional audio (although it may subsequently return
     * additional results). The client should stop sending additional audio
     * data, half-close the gRPC connection, and wait for any additional results
     * until the server closes the gRPC connection. This event is only sent if
     * `single_utterance` was set to `true`, and is not used otherwise.
     * </pre>
     *
     * <code>END_OF_SINGLE_UTTERANCE = 1;</code>
     */
    END_OF_SINGLE_UTTERANCE(1),
    /**
     * <pre>
     * This event indicates that the server has detected an end-point in the
     * user's speech. End-point is a considerable silence that maybe indicates
     * the end of one single utterance or between word silence.
     * </pre>
     *
     * <code>END_POINT = 2;</code>
     */
    END_POINT(2),
    /**
     * <pre>
     * This event indicates that the server has processed the whole user's speech.
     * This means there wasn't any errors and limitation during processing of the
     * speech. This event is sent just once and with the last response.
     * </pre>
     *
     * <code>END_OF_SPEECH = 3;</code>
     */
    END_OF_SPEECH(3),
    /**
     * <pre>
     * This event indicates that the data size limit is reach and the future
     * incoming speech chunks will not be processed. So, the user should stop sending
     * any other speech data.
     * </pre>
     *
     * <code>DATA_SIZE_LIMIT = 4;</code>
     */
    DATA_SIZE_LIMIT(4),
    /**
     * <pre>
     * This event indicates that server timeout happened for this request and
     * server stops any future processing. This may happen for some reasons
     * such as server overloading. In this case, also user should stop sending
     * any other speech data.
     * </pre>
     *
     * <code>TIMEOUT = 5;</code>
     */
    TIMEOUT(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * No speech event specified.
     * </pre>
     *
     * <code>SPEECH_EVENT_UNSPECIFIED = 0;</code>
     */
    public static final int SPEECH_EVENT_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * This event indicates that the server has detected the end of the user's
     * speech utterance and expects no additional speech. Therefore, the server
     * will not process additional audio (although it may subsequently return
     * additional results). The client should stop sending additional audio
     * data, half-close the gRPC connection, and wait for any additional results
     * until the server closes the gRPC connection. This event is only sent if
     * `single_utterance` was set to `true`, and is not used otherwise.
     * </pre>
     *
     * <code>END_OF_SINGLE_UTTERANCE = 1;</code>
     */
    public static final int END_OF_SINGLE_UTTERANCE_VALUE = 1;
    /**
     * <pre>
     * This event indicates that the server has detected an end-point in the
     * user's speech. End-point is a considerable silence that maybe indicates
     * the end of one single utterance or between word silence.
     * </pre>
     *
     * <code>END_POINT = 2;</code>
     */
    public static final int END_POINT_VALUE = 2;
    /**
     * <pre>
     * This event indicates that the server has processed the whole user's speech.
     * This means there wasn't any errors and limitation during processing of the
     * speech. This event is sent just once and with the last response.
     * </pre>
     *
     * <code>END_OF_SPEECH = 3;</code>
     */
    public static final int END_OF_SPEECH_VALUE = 3;
    /**
     * <pre>
     * This event indicates that the data size limit is reach and the future
     * incoming speech chunks will not be processed. So, the user should stop sending
     * any other speech data.
     * </pre>
     *
     * <code>DATA_SIZE_LIMIT = 4;</code>
     */
    public static final int DATA_SIZE_LIMIT_VALUE = 4;
    /**
     * <pre>
     * This event indicates that server timeout happened for this request and
     * server stops any future processing. This may happen for some reasons
     * such as server overloading. In this case, also user should stop sending
     * any other speech data.
     * </pre>
     *
     * <code>TIMEOUT = 5;</code>
     */
    public static final int TIMEOUT_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpeechEventType valueOf(int value) {
      return forNumber(value);
    }

    public static SpeechEventType forNumber(int value) {
      switch (value) {
        case 0: return SPEECH_EVENT_UNSPECIFIED;
        case 1: return END_OF_SINGLE_UTTERANCE;
        case 2: return END_POINT;
        case 3: return END_OF_SPEECH;
        case 4: return DATA_SIZE_LIMIT;
        case 5: return TIMEOUT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SpeechEventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SpeechEventType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpeechEventType>() {
            public SpeechEventType findValueByNumber(int number) {
              return SpeechEventType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ir.deepmine.speech.v1.StreamingRecognizeResponse.getDescriptor().getEnumTypes().get(0);
    }

    private static final SpeechEventType[] VALUES = values();

    public static SpeechEventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SpeechEventType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType)
  }

  private int bitField0_;
  public static final int ERROR_MESSAGE_FIELD_NUMBER = 1;
  private volatile java.lang.Object errorMessage_;
  /**
   * <pre>
   * Output only. If set, returns a message that specifies the error for the operation.
   * </pre>
   *
   * <code>string error_message = 1;</code>
   */
  public java.lang.String getErrorMessage() {
    java.lang.Object ref = errorMessage_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      errorMessage_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Output only. If set, returns a message that specifies the error for the operation.
   * </pre>
   *
   * <code>string error_message = 1;</code>
   */
  public com.google.protobuf.ByteString
      getErrorMessageBytes() {
    java.lang.Object ref = errorMessage_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      errorMessage_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RESULTS_FIELD_NUMBER = 2;
  private java.util.List<ir.deepmine.speech.v1.StreamingRecognitionResult> results_;
  /**
   * <pre>
   * Output only. This repeated list contains zero or more results that
   * correspond to consecutive portions of the audio currently being processed.
   * It contains zero or one `is_final=true` result (the newly settled portion),
   * followed by zero or more `is_final=false` results (the interim results).
   * </pre>
   *
   * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
   */
  public java.util.List<ir.deepmine.speech.v1.StreamingRecognitionResult> getResultsList() {
    return results_;
  }
  /**
   * <pre>
   * Output only. This repeated list contains zero or more results that
   * correspond to consecutive portions of the audio currently being processed.
   * It contains zero or one `is_final=true` result (the newly settled portion),
   * followed by zero or more `is_final=false` results (the interim results).
   * </pre>
   *
   * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
   */
  public java.util.List<? extends ir.deepmine.speech.v1.StreamingRecognitionResultOrBuilder> 
      getResultsOrBuilderList() {
    return results_;
  }
  /**
   * <pre>
   * Output only. This repeated list contains zero or more results that
   * correspond to consecutive portions of the audio currently being processed.
   * It contains zero or one `is_final=true` result (the newly settled portion),
   * followed by zero or more `is_final=false` results (the interim results).
   * </pre>
   *
   * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
   */
  public int getResultsCount() {
    return results_.size();
  }
  /**
   * <pre>
   * Output only. This repeated list contains zero or more results that
   * correspond to consecutive portions of the audio currently being processed.
   * It contains zero or one `is_final=true` result (the newly settled portion),
   * followed by zero or more `is_final=false` results (the interim results).
   * </pre>
   *
   * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
   */
  public ir.deepmine.speech.v1.StreamingRecognitionResult getResults(int index) {
    return results_.get(index);
  }
  /**
   * <pre>
   * Output only. This repeated list contains zero or more results that
   * correspond to consecutive portions of the audio currently being processed.
   * It contains zero or one `is_final=true` result (the newly settled portion),
   * followed by zero or more `is_final=false` results (the interim results).
   * </pre>
   *
   * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
   */
  public ir.deepmine.speech.v1.StreamingRecognitionResultOrBuilder getResultsOrBuilder(
      int index) {
    return results_.get(index);
  }

  public static final int SPEECH_EVENT_TYPE_FIELD_NUMBER = 3;
  private int speechEventType_;
  /**
   * <pre>
   * Output only. Indicates the type of speech event.
   * </pre>
   *
   * <code>.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;</code>
   */
  public int getSpeechEventTypeValue() {
    return speechEventType_;
  }
  /**
   * <pre>
   * Output only. Indicates the type of speech event.
   * </pre>
   *
   * <code>.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;</code>
   */
  public ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType getSpeechEventType() {
    @SuppressWarnings("deprecation")
    ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType result = ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType.valueOf(speechEventType_);
    return result == null ? ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getErrorMessageBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, errorMessage_);
    }
    for (int i = 0; i < results_.size(); i++) {
      output.writeMessage(2, results_.get(i));
    }
    if (speechEventType_ != ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType.SPEECH_EVENT_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, speechEventType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getErrorMessageBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, errorMessage_);
    }
    for (int i = 0; i < results_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, results_.get(i));
    }
    if (speechEventType_ != ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType.SPEECH_EVENT_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, speechEventType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ir.deepmine.speech.v1.StreamingRecognizeResponse)) {
      return super.equals(obj);
    }
    ir.deepmine.speech.v1.StreamingRecognizeResponse other = (ir.deepmine.speech.v1.StreamingRecognizeResponse) obj;

    boolean result = true;
    result = result && getErrorMessage()
        .equals(other.getErrorMessage());
    result = result && getResultsList()
        .equals(other.getResultsList());
    result = result && speechEventType_ == other.speechEventType_;
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ERROR_MESSAGE_FIELD_NUMBER;
    hash = (53 * hash) + getErrorMessage().hashCode();
    if (getResultsCount() > 0) {
      hash = (37 * hash) + RESULTS_FIELD_NUMBER;
      hash = (53 * hash) + getResultsList().hashCode();
    }
    hash = (37 * hash) + SPEECH_EVENT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + speechEventType_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ir.deepmine.speech.v1.StreamingRecognizeResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ir.deepmine.speech.v1.StreamingRecognizeResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * `StreamingRecognizeResponse` is the only message returned to the client by
   * `BidiStreamingRecognize`. A series of zero or more `StreamingRecognizeResponse`
   * messages are streamed back to the client. If there is no recognizable
   * audio, and `single_utterance` is set to false, then no messages are streamed
   * back to the client.
   * Here's an example of a series of ten `StreamingRecognizeResponse`s that might
   * be returned while processing audio:
   * 1. results { alternatives { transcript: "tube" } stability: 0.01 }
   * 2. results { alternatives { transcript: "to be a" } stability: 0.01 }
   * 3. results { alternatives { transcript: "to be" } stability: 0.9 }
   *    results { alternatives { transcript: " or not to be" } stability: 0.01 }
   * 4. results { alternatives { transcript: "to be or not to be" confidence: 0.92 }
   *              alternatives { transcript: "to bee or not to bee" }
   *              is_final: true }
   * 5. results { alternatives { transcript: " that's" } stability: 0.01 }
   * 6. results { alternatives { transcript: " that is" } stability: 0.9 }
   *    results { alternatives { transcript: " the question" } stability: 0.01 }
   * 7. results { alternatives { transcript: " that is the question" confidence: 0.98 }
   *              alternatives { transcript: " that was the question" }
   *              is_final: true }
   * Notes:
   * - Only two of the above responses #4 and #7 contain final results; they are
   *   indicated by `is_final: true`. Concatenating these together generates the
   *   full transcript: "to be or not to be that is the question".
   * - The others contain interim `results`. #3 and #6 contain two interim
   *   `results`: the first portion has a high stability and is less likely to
   *   change; the second portion has a low stability and is very likely to
   *   change. A UI designer might choose to show only high stability `results`.
   * - The specific `stability` and `confidence` values shown above are only for
   *   illustrative purposes. Actual values may vary.
   * - In each response, only one of these fields will be set:
   *     `error`,
   *     `speech_event_type`, or
   *     one or more (repeated) `results`.
   * </pre>
   *
   * Protobuf type {@code deepmine.speech.v1.StreamingRecognizeResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:deepmine.speech.v1.StreamingRecognizeResponse)
      ir.deepmine.speech.v1.StreamingRecognizeResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ir.deepmine.speech.v1.SpeechProto.internal_static_deepmine_speech_v1_StreamingRecognizeResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ir.deepmine.speech.v1.SpeechProto.internal_static_deepmine_speech_v1_StreamingRecognizeResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ir.deepmine.speech.v1.StreamingRecognizeResponse.class, ir.deepmine.speech.v1.StreamingRecognizeResponse.Builder.class);
    }

    // Construct using ir.deepmine.speech.v1.StreamingRecognizeResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getResultsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      errorMessage_ = "";

      if (resultsBuilder_ == null) {
        results_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        resultsBuilder_.clear();
      }
      speechEventType_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ir.deepmine.speech.v1.SpeechProto.internal_static_deepmine_speech_v1_StreamingRecognizeResponse_descriptor;
    }

    @java.lang.Override
    public ir.deepmine.speech.v1.StreamingRecognizeResponse getDefaultInstanceForType() {
      return ir.deepmine.speech.v1.StreamingRecognizeResponse.getDefaultInstance();
    }

    @java.lang.Override
    public ir.deepmine.speech.v1.StreamingRecognizeResponse build() {
      ir.deepmine.speech.v1.StreamingRecognizeResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ir.deepmine.speech.v1.StreamingRecognizeResponse buildPartial() {
      ir.deepmine.speech.v1.StreamingRecognizeResponse result = new ir.deepmine.speech.v1.StreamingRecognizeResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.errorMessage_ = errorMessage_;
      if (resultsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          results_ = java.util.Collections.unmodifiableList(results_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.results_ = results_;
      } else {
        result.results_ = resultsBuilder_.build();
      }
      result.speechEventType_ = speechEventType_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ir.deepmine.speech.v1.StreamingRecognizeResponse) {
        return mergeFrom((ir.deepmine.speech.v1.StreamingRecognizeResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ir.deepmine.speech.v1.StreamingRecognizeResponse other) {
      if (other == ir.deepmine.speech.v1.StreamingRecognizeResponse.getDefaultInstance()) return this;
      if (!other.getErrorMessage().isEmpty()) {
        errorMessage_ = other.errorMessage_;
        onChanged();
      }
      if (resultsBuilder_ == null) {
        if (!other.results_.isEmpty()) {
          if (results_.isEmpty()) {
            results_ = other.results_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureResultsIsMutable();
            results_.addAll(other.results_);
          }
          onChanged();
        }
      } else {
        if (!other.results_.isEmpty()) {
          if (resultsBuilder_.isEmpty()) {
            resultsBuilder_.dispose();
            resultsBuilder_ = null;
            results_ = other.results_;
            bitField0_ = (bitField0_ & ~0x00000002);
            resultsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getResultsFieldBuilder() : null;
          } else {
            resultsBuilder_.addAllMessages(other.results_);
          }
        }
      }
      if (other.speechEventType_ != 0) {
        setSpeechEventTypeValue(other.getSpeechEventTypeValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ir.deepmine.speech.v1.StreamingRecognizeResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ir.deepmine.speech.v1.StreamingRecognizeResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object errorMessage_ = "";
    /**
     * <pre>
     * Output only. If set, returns a message that specifies the error for the operation.
     * </pre>
     *
     * <code>string error_message = 1;</code>
     */
    public java.lang.String getErrorMessage() {
      java.lang.Object ref = errorMessage_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        errorMessage_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Output only. If set, returns a message that specifies the error for the operation.
     * </pre>
     *
     * <code>string error_message = 1;</code>
     */
    public com.google.protobuf.ByteString
        getErrorMessageBytes() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        errorMessage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Output only. If set, returns a message that specifies the error for the operation.
     * </pre>
     *
     * <code>string error_message = 1;</code>
     */
    public Builder setErrorMessage(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      errorMessage_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. If set, returns a message that specifies the error for the operation.
     * </pre>
     *
     * <code>string error_message = 1;</code>
     */
    public Builder clearErrorMessage() {
      
      errorMessage_ = getDefaultInstance().getErrorMessage();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. If set, returns a message that specifies the error for the operation.
     * </pre>
     *
     * <code>string error_message = 1;</code>
     */
    public Builder setErrorMessageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      errorMessage_ = value;
      onChanged();
      return this;
    }

    private java.util.List<ir.deepmine.speech.v1.StreamingRecognitionResult> results_ =
      java.util.Collections.emptyList();
    private void ensureResultsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        results_ = new java.util.ArrayList<ir.deepmine.speech.v1.StreamingRecognitionResult>(results_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        ir.deepmine.speech.v1.StreamingRecognitionResult, ir.deepmine.speech.v1.StreamingRecognitionResult.Builder, ir.deepmine.speech.v1.StreamingRecognitionResultOrBuilder> resultsBuilder_;

    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public java.util.List<ir.deepmine.speech.v1.StreamingRecognitionResult> getResultsList() {
      if (resultsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(results_);
      } else {
        return resultsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public int getResultsCount() {
      if (resultsBuilder_ == null) {
        return results_.size();
      } else {
        return resultsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public ir.deepmine.speech.v1.StreamingRecognitionResult getResults(int index) {
      if (resultsBuilder_ == null) {
        return results_.get(index);
      } else {
        return resultsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder setResults(
        int index, ir.deepmine.speech.v1.StreamingRecognitionResult value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.set(index, value);
        onChanged();
      } else {
        resultsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder setResults(
        int index, ir.deepmine.speech.v1.StreamingRecognitionResult.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.set(index, builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder addResults(ir.deepmine.speech.v1.StreamingRecognitionResult value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.add(value);
        onChanged();
      } else {
        resultsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder addResults(
        int index, ir.deepmine.speech.v1.StreamingRecognitionResult value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.add(index, value);
        onChanged();
      } else {
        resultsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder addResults(
        ir.deepmine.speech.v1.StreamingRecognitionResult.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.add(builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder addResults(
        int index, ir.deepmine.speech.v1.StreamingRecognitionResult.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.add(index, builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder addAllResults(
        java.lang.Iterable<? extends ir.deepmine.speech.v1.StreamingRecognitionResult> values) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, results_);
        onChanged();
      } else {
        resultsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder clearResults() {
      if (resultsBuilder_ == null) {
        results_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        resultsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public Builder removeResults(int index) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.remove(index);
        onChanged();
      } else {
        resultsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public ir.deepmine.speech.v1.StreamingRecognitionResult.Builder getResultsBuilder(
        int index) {
      return getResultsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public ir.deepmine.speech.v1.StreamingRecognitionResultOrBuilder getResultsOrBuilder(
        int index) {
      if (resultsBuilder_ == null) {
        return results_.get(index);  } else {
        return resultsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public java.util.List<? extends ir.deepmine.speech.v1.StreamingRecognitionResultOrBuilder> 
         getResultsOrBuilderList() {
      if (resultsBuilder_ != null) {
        return resultsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(results_);
      }
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public ir.deepmine.speech.v1.StreamingRecognitionResult.Builder addResultsBuilder() {
      return getResultsFieldBuilder().addBuilder(
          ir.deepmine.speech.v1.StreamingRecognitionResult.getDefaultInstance());
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public ir.deepmine.speech.v1.StreamingRecognitionResult.Builder addResultsBuilder(
        int index) {
      return getResultsFieldBuilder().addBuilder(
          index, ir.deepmine.speech.v1.StreamingRecognitionResult.getDefaultInstance());
    }
    /**
     * <pre>
     * Output only. This repeated list contains zero or more results that
     * correspond to consecutive portions of the audio currently being processed.
     * It contains zero or one `is_final=true` result (the newly settled portion),
     * followed by zero or more `is_final=false` results (the interim results).
     * </pre>
     *
     * <code>repeated .deepmine.speech.v1.StreamingRecognitionResult results = 2;</code>
     */
    public java.util.List<ir.deepmine.speech.v1.StreamingRecognitionResult.Builder> 
         getResultsBuilderList() {
      return getResultsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        ir.deepmine.speech.v1.StreamingRecognitionResult, ir.deepmine.speech.v1.StreamingRecognitionResult.Builder, ir.deepmine.speech.v1.StreamingRecognitionResultOrBuilder> 
        getResultsFieldBuilder() {
      if (resultsBuilder_ == null) {
        resultsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            ir.deepmine.speech.v1.StreamingRecognitionResult, ir.deepmine.speech.v1.StreamingRecognitionResult.Builder, ir.deepmine.speech.v1.StreamingRecognitionResultOrBuilder>(
                results_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        results_ = null;
      }
      return resultsBuilder_;
    }

    private int speechEventType_ = 0;
    /**
     * <pre>
     * Output only. Indicates the type of speech event.
     * </pre>
     *
     * <code>.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;</code>
     */
    public int getSpeechEventTypeValue() {
      return speechEventType_;
    }
    /**
     * <pre>
     * Output only. Indicates the type of speech event.
     * </pre>
     *
     * <code>.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;</code>
     */
    public Builder setSpeechEventTypeValue(int value) {
      speechEventType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Indicates the type of speech event.
     * </pre>
     *
     * <code>.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;</code>
     */
    public ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType getSpeechEventType() {
      @SuppressWarnings("deprecation")
      ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType result = ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType.valueOf(speechEventType_);
      return result == null ? ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Output only. Indicates the type of speech event.
     * </pre>
     *
     * <code>.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;</code>
     */
    public Builder setSpeechEventType(ir.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      speechEventType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Indicates the type of speech event.
     * </pre>
     *
     * <code>.deepmine.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 3;</code>
     */
    public Builder clearSpeechEventType() {
      
      speechEventType_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:deepmine.speech.v1.StreamingRecognizeResponse)
  }

  // @@protoc_insertion_point(class_scope:deepmine.speech.v1.StreamingRecognizeResponse)
  private static final ir.deepmine.speech.v1.StreamingRecognizeResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ir.deepmine.speech.v1.StreamingRecognizeResponse();
  }

  public static ir.deepmine.speech.v1.StreamingRecognizeResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StreamingRecognizeResponse>
      PARSER = new com.google.protobuf.AbstractParser<StreamingRecognizeResponse>() {
    @java.lang.Override
    public StreamingRecognizeResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new StreamingRecognizeResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<StreamingRecognizeResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StreamingRecognizeResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ir.deepmine.speech.v1.StreamingRecognizeResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

