buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

plugins {
  id "com.google.protobuf" version "0.8.5"
  id "java"
  id "application"
  id "idea"
  id 'com.github.ben-manes.versions' version '0.19.0'
}

group 'sample'
version '1.0-SNAPSHOT'

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.6.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.12.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

//jar {
//    manifest {
//        attributes(
//                'Main-Class': 'ir.deepmine.grpc.GrpcClient'
//        )
//    }
//}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'io.grpc:grpc-all:1.12.0'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.1'
    implementation group: 'org.json', name: 'json', version: '20190722'
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}

task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'sample.Main'
}

startScripts.enabled = false

task grpcClient(type: CreateStartScripts) {
    mainClassName = "sample.StreamDirectly"
    applicationName = "deepmine-grpc-client"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {\
    from(grpcClient)
    fileMode = 0755
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java"]
            includes = ["**/*.fxml"]
            includes = ["**/*.png"]
            includes = ["**/*.css"]
        }
    }
}

apply plugin: 'java'

jar {
    manifest {
        attributes("Manifest-Version": "1.0",
                "Main-Class": "sample.Main");
    }
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}